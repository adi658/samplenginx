name: "GitHub Actions Example"

"on":
  push: { branches: [main] }

jobs:

  terraform:
    runs-on: ubuntu-latest
    env:
      working-directory: terraform
      TF_WORKSPACE: my-workspace
      repository: adi658/samplenginx
    steps:
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.10

      - name: Check out code
        uses: actions/checkout@v2
        
      - name: Terraform Fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform init
        id: init
        run: terraform init
        working-directory: ${{ env.working-directory }}
        env:
          TF_CLI_ARGS_init: "-backend-config=role_arn=arn:aws:iam::99999999:role/my-github-actions-role -upgrade -reconfigure"
          TF_VAR_assume_role: "my-github-actions-role"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.working-directory }}
        run: terraform plan -no-color -out tfplan-myplan
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_PAT }} # For terraform on github

      - name: Format Plan
        id: fplan
        working-directory: ${{ env.working-directory }}
        run: |
          plan=$(cat <<'EOF'
          ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr ) }}
          EOF
          )
          echo "tf_plan<<EOF" >> $GITHUB_OUTPUT
          echo "${plan}" | grep -v 'Refreshing state' | grep -v ': Reading...' | grep -v ': Read complete after' | grep -v '^ *$' | grep -A 4000 'Terraform will perform the following actions:' | cut -c -4000 >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Plan Output
        uses: actions/github-script@v6
        id: planout
        with:
          script: |
            const output = `#### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outcome }}\`
            <details>
            <summary>Validation Output</summary>
            ${{ steps.validate.outcome }}
            </details>

            #### Terraform Plan \`${{ steps.plan.outcome }}\`
            <details>
            <summary>Show Plan</summary>
            ${{ steps.fplan.outputs.tf_plan }}
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            return output
        env:
          TFPLAN: ${{ steps.fplan.outputs.tf_plan }}
          
      - name: Format new Line 
        id: formatnewline
        run: |
          tfoutputplan=$(echo ${{ steps.planout.outputs.result }} | tr '\\n' \<br\> )
          echo ${tfoutputplan}
          
      - name: Checkout Wiki
        #if: ${{ github.event.release.prerelease }}
        uses: actions/checkout@v3
        with:
          repository: ${{github.repository}}.wiki
          path: wiki

      - name: Add plan to release wiki
        #if: ${{ github.event.release.prerelease }}
        run: |
          cd wiki && \
          echo ${{steps.planout.outputs.result}} > plan1.md

      - name: Add and commit
        #if: ${{ github.event.release.prerelease }}
        run: cd ./wiki && git add . && git commit -m "Added release ${{ github.ref_name}}"
        env:
          GIT_AUTHOR_EMAIL: adi658@gmail.com
          GIT_AUTHOR_NAME: adi658
          GIT_COMMITTER_EMAIL: adi658@gmail.com
          GIT_COMMITTER_NAME: adi658

      - name: Push Branch to GitHub
        #if: ${{ github.event.release.prerelease }}
        run: |-
          cd ./wiki && git push \
            --set-upstream "origin" \
            "HEAD:refs/heads/master"
            
            
#       - name: Push changes to wiki repo
#         uses: ad-m/github-push-action@master
#         with:
#           repository: ${{env.repository}}.wiki    # specify the wiki repo and push the update.
#           github_token: ${{ secrets.PERSONAL_PAT }}
      
      
      
